#BlueJ class context
comment0.target=CPUManager
comment1.params=msec\ usec
comment1.target=void\ sleep(int,\ int)
comment10.params=
comment10.target=void\ clearUnblockFlag()
comment10.text=clear\ the\ flag\ that\ tells\ if\ the\ thread\ was\ unblocked\ when\ RUNNABLE
comment11.params=thread
comment11.target=void\ waitUntilBlocked(CPUState)
comment11.text=\ wait\ until\ thread\ blocks\n@param\ thread
comment12.params=thread
comment12.target=void\ join(CPUState)
comment12.text=\ wait\ until\ the\ given\ thread\ terminates\n@param\ thread
comment13.params=state
comment13.target=boolean\ unblock(CPUState)
comment13.text=\n\ @param\ state\n\ @return\ true\ if\ thread\ was\ unblocked\ otherwise\ false\n
comment14.params=entry
comment14.target=CPUState\ createCPUState(ThreadEntry)
comment15.params=state
comment15.target=boolean\ start(CPUState)
comment16.params=
comment16.target=void\ printStackTrace()
comment17.params=
comment17.target=AtomicVariable\ getAtomicVariable()
comment18.params=name
comment18.target=void\ setThreadName(java.lang.String)
comment19.params=portalParameter
comment19.target=void\ attachToThread(java.lang.Object)
comment2.params=var\ millis\ nanos
comment2.target=void\ wait(java.lang.Object,\ int,\ int)
comment20.params=
comment20.target=java.lang.Object\ getAttachedObject()
comment21.params=
comment21.target=Credential\ getCredential()
comment22.params=label
comment22.target=int\ createNewEvent(java.lang.String)
comment23.params=nr
comment23.target=void\ recordEvent(int)
comment24.params=nr\ info
comment24.target=void\ recordEventWithInfo(int,\ int)
comment25.params=classname\ fieldname
comment25.target=CAS\ getCAS(java.lang.String,\ java.lang.String)
comment26.params=name
comment26.target=VMClass\ getClass(java.lang.String)
comment26.text=this\ has\ nothing\ to\ do\ with\ managing\ a\ CPU;\ it's\ here\ until\ we\ find\ a\ better\ place
comment27.params=obj
comment27.target=VMClass\ getVMClass(java.lang.Object)
comment28.params=
comment28.target=VMObject\ getVMObject()
comment28.text=this\ too\ has\ nothing\ to\ do\ with\ managing\ a\ CPU;\ it's\ here\ until\ we\ find\ a\ better\ place
comment29.params=
comment29.target=void\ assertInterruptEnabled()
comment29.text=returns\ a\ "new"\ VMObject
comment3.params=var
comment3.target=void\ notify(java.lang.Object)
comment30.params=componentID
comment30.target=void\ executeClassConstructors(int)
comment31.params=
comment31.target=void\ reboot()
comment32.params=
comment32.target=int\ getStackDepth()
comment33.params=depth
comment33.target=java.lang.String\ getStackFrameClassName(int)
comment34.params=depth
comment34.target=java.lang.String\ getStackFrameMethodName(int)
comment35.params=depth
comment35.target=int\ getStackFrameLine(int)
comment36.params=depth
comment36.target=int\ getStackFrameBytecode(int)
comment37.params=
comment37.target=void\ inhibitScheduling()
comment38.params=
comment38.target=void\ allowScheduling()
comment4.params=var
comment4.target=void\ notifyAll(java.lang.Object)
comment5.params=msg\ obj
comment5.target=void\ dump(java.lang.String,\ java.lang.Object)
comment6.params=state
comment6.target=void\ switchTo(CPUState)
comment7.params=
comment7.target=CPUState\ getCPUState()
comment8.params=
comment8.target=void\ block()
comment8.text=block\ this\ thread
comment9.params=
comment9.target=void\ blockIfNotUnblocked()
comment9.text=avoid\ lost\ unblocks\ by\ blocking\ only\ if\ the\ thread\ was\ not\ unblocked\ when\ RUNNABLE
numComments=39
